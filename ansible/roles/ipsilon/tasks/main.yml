- name: Create the data and conf directories
  delegate_to: localhost
  file:
    path: "{{ data_dir }}/{{ item }}"
    state: directory
  loop:
    - data
    - conf
    - conf/ipsilon
    - conf/certs

- name: Check if the keytab already exists
  delegate_to: localhost
  stat:
    path: "{{ data_top_dir }}/ipa/keytabs/ipsilon.keytab"
  register: keytab_file

- block:
    - name: kinit
      shell: echo "{{ ipa_admin_password }}" | kinit admin@{{ krb_realm }}

    - name: Create the host in IPA
      command: ipa host-add {{ fqdn }} --force
      register: output
      changed_when: "'already exists' not in output.stderr"
      failed_when: "'already exists' not in output.stderr and output.rc != 0"

    - name: Create the service in IPA
#       delegate_to: localhost
#       connection: local
#       containers.podman.podman_container_exec:
#         name: tinystage-ipa
#         command: ipa service-add HTTP/{{ fqdn }} --force
      command: ipa service-add HTTP/{{ fqdn }} --force
      register: output
      changed_when: "'already exists' not in output.stderr"
      failed_when: "'already exists' not in output.stderr and output.rc != 0"

    - name: Allow the IPA host to manage the new service
      command: ipa service-add-host --hosts=ipa.tinystage.test HTTP/{{ fqdn }}
      register: output
      changed_when: "'already exists' not in output.stderr"
      failed_when: "'already exists' not in output.stderr and output.rc != 0"

      # ipa role-add-member --hosts=web.example.com certadmin

    - name: Create the keytabs directory
      delegate_to: localhost
      file:
        path: "{{ data_top_dir }}/ipa/keytabs"
        state: directory

    - name: Get a keytab
      command: ipa-getkeytab -p HTTP/{{ fqdn }} -k /data/keytabs/ipsilon.keytab

    - name: kdestroy
      command: kdestroy -A

  delegate_to: ipa.tinystage.test
  when: not keytab_file.stat.exists

- name: Move the keytab to the ipsilon data dir
  delegate_to: localhost
  connection: local
  copy:
    remote_src: true
    src: "{{ data_top_dir }}/ipa/keytabs/ipsilon.keytab"
    dest: "{{ data_dir }}/conf/ipsilon.keytab"


- name: Check if the certificate already exists
  delegate_to: localhost
  stat:
    path: "{{ data_dir }}/conf/certs/httpd.crt"
  register: cert_file

- block:
    - name: kinit
      shell: echo "{{ ipa_admin_password }}" | kinit admin@{{ krb_realm }}

    - name: Get a certificate
      import_role:
        name: cert
      vars:
        cert_basename: ipsilon
        cert_hostname: "{{ fqdn }}"
        cert_owner: admin
        krb_service: HTTP

    - name: kdestroy
      command: kdestroy -A

  delegate_to: ipa.tinystage.test
  when: not cert_file.stat.exists

- name: Move the cert & key to the ipsilon data dir
  delegate_to: localhost
  connection: local
  copy:
    remote_src: true
    src: "{{ data_top_dir }}/ipa/etc/pki/tls/certs/{{ item.src }}"
    dest: "{{ data_dir }}/conf/certs/{{ item.dest }}"
  loop:
    - src: ipsilon.pem
      dest: httpd.crt
    - src: ipsilon.key
      dest: httpd.key

# - name: Run or install the container
#   delegate_to: localhost
#   connection: local
#   containers.podman.podman_container:
#     name: tinystage-{{ container_name }}
#     hostname: "{{ container_name }}.{{ domain }}"
#     image: ipsilon:latest
#     state: started

- name: Build the Ipsilon image
  delegate_to: localhost
  connection: local
  containers.podman.podman_image:
    name: tinystage-{{ container_name }}
    path: "{{ playbook_dir }}/../build/{{ container_name }}"
    state: build

- name: Run Ipsilon
  delegate_to: localhost
  connection: local
  containers.podman.podman_container:
    name: tinystage-{{ container_name }}
    hostname: "{{ container_name }}.{{ domain }}"
    image: tinystage-{{ container_name }}
    volume:
      - "{{ data_dir }}/data:/data:Z"
      - "{{ data_dir }}/conf:/conf:Z"
    network: tinystage
    env:
      IPA_ADMIN_PASSWORD: "{{ ipa_admin_password }}"
    label:
      traefik.enable: true
      traefik.http.routers.ipsilon.rule: "Host(`{{ fqdn }}`)"
      traefik.http.services.ipsilon.loadbalancer.server.port: 80
      traefik.http.services.ipsilon.loadbalancer.server.port: 443
